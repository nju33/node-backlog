import t from"axios";const e=e=>t.create({baseURL:"https://geek.backlog.jp/api/v2/",params:{apiKey:e}});function r(t,e,r,s){return new(r||(r=Promise))(function(o,n){function i(t){try{c(s.next(t))}catch(t){n(t)}}function a(t){try{c(s.throw(t))}catch(t){n(t)}}function c(t){t.done?o(t.value):new r(function(e){e(t.value)}).then(i,a)}c((s=s.apply(t,e||[])).next())})}class s{constructor(t){this.axios=t}}class o extends s{getProjects(t={}){return r(this,void 0,void 0,function*(){try{return(yield this.axios.get("projects",{params:t})).data}catch(t){throw new Error(t.response.data.errors[0].message)}})}getProjectByProjectKey(t,e={}){return r(this,void 0,void 0,function*(){return(yield this.getProjects(e)).find(e=>e.projectKey===t)})}}class n extends s{getIssues(t={}){return r(this,void 0,void 0,function*(){try{return(yield this.axios.get("issues",{params:t})).data}catch(t){throw new Error(t.response.data.errors[0].message)}})}}class i extends s{getStatuses(){return r(this,void 0,void 0,function*(){try{return(yield this.axios.get("statuses")).data}catch(t){throw new Error(t.response.data.errors[0].message)}})}}class a{constructor(t){this.config=t;const r=e(t.apiKey);this.status=new i(r),this.project=new o(r),this.issue=new n(r)}getStatuses(){return r(this,void 0,void 0,function*(){try{return this.status.getStatuses()}catch(t){throw new Error(t.response.data.errors[0].message)}})}getProjects(t={}){return r(this,void 0,void 0,function*(){try{return this.project.getProjects(t)}catch(t){throw new Error(t.response.data.errors[0].message)}})}getProjectByProjectKey(t,e={}){return r(this,void 0,void 0,function*(){return this.project.getProjectByProjectKey(t,e)})}getIssues(t){return r(this,void 0,void 0,function*(){try{return this.issue.getIssues(t)}catch(t){throw new Error(t.response.data.errors[0].message)}})}}export{e as createAxiosInstance,a as Backlog,n as Issue,s as Module,o as Project,i as Status};
//# sourceMappingURL=backlog.m.js.map
